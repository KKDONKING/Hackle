rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is squad owner
    function isSquadOwner(squadId) {
      let squad = get(/databases/$(database)/documents/squads/$(squadId)).data;
      return squad != null && squad.ownerId == request.auth.uid;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user != null && user.role == "admin";
    }
    
    // Allow users to read and write their own data
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Leaderboard collection rules
    match /leaderboard/{document=**} {
      allow read: if isAuthenticated();  // Anyone logged in can read leaderboard
      allow write: if isAuthenticated(); // Anyone logged in can update scores
    }
    
    // Allow squad operations
    match /squads/{squadId} {
      // Anyone can read squad data
      allow read: if request.auth != null;
      
      // Only squad owner can delete
      allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
      
      // Allow create if user is authenticated
      allow create: if request.auth != null;
      
      // Allow update if user is authenticated and either:
      // 1. User is the owner of the squad
      // 2. User is joining the squad (adding themselves to members array)
      // 3. User is leaving the squad (removing themselves from members array)
      allow update: if request.auth != null && (
        resource.data.ownerId == request.auth.uid || 
        (
          // For joining a squad:
          // - The only change is adding the user to the members array
          // - The squad is not full (less than 4 members)
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
          request.resource.data.members.size() <= 4 &&
          request.resource.data.members.hasAll(resource.data.members) &&
          request.resource.data.members.size() == resource.data.members.size() + 1 &&
          request.resource.data.members.hasAll([request.auth.uid])
        ) ||
        (
          // For leaving a squad:
          // - The only change is removing the user from members array
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
          resource.data.members.hasAll(request.resource.data.members) &&
          resource.data.members.size() == request.resource.data.members.size() + 1 &&
          !request.resource.data.members.hasAll([request.auth.uid]) &&
          resource.data.members.hasAll([request.auth.uid])
        )
      );
    }
    
    // Allow quiz operations
    match /quizzes/{quizId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.role == "admin";
    }
  }
}